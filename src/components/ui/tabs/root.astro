---
import type { HTMLAttributes } from 'astro/types';
import { twMerge } from 'tailwind-merge';

type Props = HTMLAttributes<'div'>;

const { class: className, ...props } = Astro.props;
---

<div
  {...props}
  data-tabs={crypto.randomUUID()}
  class={twMerge('overflow-hidden rounded border bg', className)}
>
  <slot />
</div>

<script>
  document.addEventListener('astro:page-load', () => {
    (document.querySelectorAll('[data-tabs]') as NodeListOf<HTMLDivElement>)?.forEach((root) => {
      const tabs = root.querySelectorAll('[role="tab"]') as NodeListOf<HTMLButtonElement>;
      const tabPanels = root.querySelectorAll('[role="tabpanel"]') as NodeListOf<HTMLElement>;

      const setTab = (tab: HTMLButtonElement, index: number) => {
        const lastIndex = Array.from(tabs).findIndex((_tab) => {
          return _tab.getAttribute('aria-selected') === 'true';
        });

        tabs.forEach((_tab) => {
          const tabPanel = root.querySelector(`#${_tab.getAttribute('aria-controls')}`);

          if (tab.id === _tab.id) {
            if (index < lastIndex)
              _tab.classList.add('motion-safe:aria-selected:after:slide-in-from-right-full');
            else _tab.classList.add('motion-safe:aria-selected:after:slide-in-from-left-full');

            _tab.setAttribute('aria-selected', 'true');
            _tab.removeAttribute('tabindex');
            tabPanel?.setAttribute('data-selected', 'true');
          } else {
            _tab.classList.remove('motion-safe:aria-selected:after:slide-in-from-right-full');
            _tab.classList.remove('motion-safe:aria-selected:after:slide-in-from-left-full');
            _tab.setAttribute('aria-selected', 'false');
            _tab.setAttribute('tabindex', '-1');
            tabPanel?.setAttribute('data-selected', 'false');
          }
        });
      };

      tabs?.forEach((tab, index) => {
        tab.setAttribute('id', `tabs-tab-${root.dataset.tabs}-${index}`);
        tab.setAttribute('aria-controls', `tabs-tabpanel-${root.dataset.tabs}-${index}`);
        tab.onclick = () => setTab(tab, index);
      });

      tabPanels?.forEach((tabPanel, index) => {
        tabPanel.setAttribute('id', `tabs-tabpanel-${root.dataset.tabs}-${index}`);
        tabPanel.setAttribute('aria-labelledby', `tabs-tab-${root.dataset.tabs}-${index}`);
      });
    });
  });
</script>
